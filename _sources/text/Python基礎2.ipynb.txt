{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Python基礎 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 〇リスト\n",
    "リストは、複数の値をまとめて扱う場合に使用するものです。  \n",
    "リストの値はmutable、つまり可変的で、値を入れ替えたり、リスト毎四則演算を行うことが可能です。  \n",
    "  \n",
    "リストは基本的に全体を`[]`で囲み、各要素は`,`で区切ります。  \n",
    "Pythonのリストは文字列でも数値でも、どのような型の値でも格納することができ、  \n",
    "リストの中にリストを格納することもできます。  \n",
    "リストの各要素へのアクセスはインデックスを使い、要素の追加や入れ替えなどが可能です。  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# リストの作成\n",
    "a = [1, 2, 3, 4, 5]\n",
    "\n",
    "# 2番目の要素を取得\n",
    "# リストの順番は 0 始まり\n",
    "# 後ろからアクセスするときは -1,-2とマイナスを入れる\n",
    "\n",
    "b = a[1]\n",
    "print(b)\n",
    "\n",
    "# 末尾に要素を追加する\n",
    "a.append(6)\n",
    "print(a)\n",
    "\n",
    "# 要素の入れ替え\n",
    "a[2] = 9\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 〇タプル\n",
    "タプルはリストに似ていますが、リストと違ってimmutable、つまり非可変的です。  \n",
    "つまり要素の追加や削除、入れ替えなどはできません。  \n",
    "タプルは全体を`()`で囲み、各要素は`,`で区切ります。  \n",
    "要素を変更したくない恒久的なデータにしたいときなどは、リストよりもタプルを使用する方がベターです。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# タプルの作成\n",
    "a = (1, 2, 3, 4, 5)\n",
    "\n",
    "# 2番目の要素を取得\n",
    "b = a[1]\n",
    "print(b)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 〇if文\n",
    "条件によって、処理の仕方を分けたいときなどに使用します。  \n",
    "例えばリンゴなら100円、ミカンなら80円支払うみたいに。 \n",
    "  \n",
    "ifの条件が満たされていなければ、elifの条件が上から順番に判定されます。  \n",
    "これらの条件がすべて満たされていなければ、else内の処理が実行されます。  \n",
    "  \n",
    "つまり、上から順番に一つずつ判定を処理していきます。  \n",
    "なので判定の記述の順序にも注意が必要です。\n",
    "  \n",
    "Pythonではブロック、つまり処理の範囲を行頭のインデントで表します。  \n",
    "インデントが始まって、それ以降にインデントしていない行が出現したら、  \n",
    "その直前にブロックは終了していることになります。    \n",
    "Pythonの場合、インデントには、半角スペース4つを用います。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "数字を入力してください: 8\n",
      "xは2以外です(ただし、正の数で1ではありません)\n"
     ]
    }
   ],
   "source": [
    "# 実行例\n",
    "x = input('数字を入力してください: ')\n",
    "x = int(x)\n",
    "\n",
    "if x < 0 :                # もし x<0 が true なら実行\n",
    "    print(\"xは負の数です\")\n",
    "elif x == 1 :             # 上記にあてはまらず、もし x==1 が true なら実行\n",
    "    print(\"xは1です\")\n",
    "elif x != 2 :             # 上記に2つにあてはまらず、もし x!=2 が true なら実行\n",
    "    print(\"xは2以外です(ただし、正の数で1ではありません)\")\n",
    "else:                    # 上記のどれにも当てはまらないなら実行\n",
    "    print(\"xは2です\")#消去法で2しか条件に当てはまりません"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "elifは何個でも記述することが可能です。  \n",
    "逆にelifやelse は省略可能です。  \n",
    "if文 はネスト(入れ子構造、if文の中にif文の構造の事)できます。  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "if x > 0 : \n",
    "    if x <= 10 : \n",
    "        print(\"xは0～10の間だよ\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 練習問題 2\n",
    "  \n",
    "入力されたxに関して、x/2を出力するプログラムの作成。  \n",
    "ただし、割り切れない場合は繰り上げること。  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<実行例>\n",
    "\n",
    "数字を入力してください: 8  \n",
    "(省略)  \n",
    "xの半分の値(繰り上げ)は 4 です。  \n",
    "  \n",
    "  \n",
    "数字を入力してください: 9  \n",
    "(省略)  \n",
    "xの半分の値(繰り上げ)は 5 です。  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
