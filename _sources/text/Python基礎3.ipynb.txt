{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Python基礎 3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 〇 for文\n",
    "  \n",
    "指定した回数ループするためにはfor文を用います。  \n",
    "ループする範囲を指定するためには、リストやrangeをin演算子とともに用います。  \n",
    "\n",
    "書き方の基本構文は以下の通りです。  \n",
    "\n",
    "```\n",
    "for 変数 in 変数グループ :\n",
    "    処理\n",
    "```\n",
    "\n",
    "この場合も、リストなどと同様に開始番号は0始まりとなります。  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tips\n",
    "rangeについて：変数グループはいくつかありますが一番使うrangeを書いておきます。  \n",
    "range(終了) : 0から終了(終了含まず)までのグループを表します。  \n",
    "range(開始,終了) : 開始から終了(終了含まず)までのグループを表します。  \n",
    "range(開始,終了,step数) : 開始から終了(終了含まず)までのグループをstep数毎に表します。  \n",
    "  \n",
    "range(5)      -> [0,1,2,3,4]  \n",
    "range(2,5)    -> [2,3,4]  \n",
    "range(1,10,2) -> [1,3,5,7,9]  \n",
    "range(5,1,-1) -> [5,4,3,2]  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# for文の出力例\n",
    "for i in range(5):  # 0,1,2,3,4 です。\n",
    "    print(i)        #ループごとに i には 0,1,2,3,4 とはいります。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# for文の出力例2\n",
    "print(\"1から10までで3で割り切れる数字のみ表示する\")\n",
    "for n in range(1,11):\n",
    "    if n%3 == 0 :\n",
    "        print(n)\n",
    "print('-------')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 〇 while文\n",
    "  \n",
    "条件を満たす限りループするためにはwhile文を用います。  \n",
    "回数が未定の待機処理のときになどに使います。  \n",
    "Trueになり続けてしまう条件を指定すると無限ループになるので注意が必要です。  \n",
    "\n",
    "書き方の基本構文は以下の通りです。  \n",
    "\n",
    "```\n",
    "while 条件 :\n",
    "    処理\n",
    "---\n",
    "「条件」が True の間、処理を繰り返します。\n",
    "if文と同様にスコープがあり、ネストできます。\n",
    "\n",
    "```\n",
    "\n",
    "この場合も、リストなどと同様に開始番号は0始まりとなります。 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# while文の出力例\n",
    "i=0\n",
    "print(\"繰り返し開始\")\n",
    "while i<5 :\n",
    "    print(i)\n",
    "    i = i+1\n",
    "print(\"繰り返し終了\")\n",
    "# ポイントは while の中で i に+1 している点です。\n",
    "# i は最初は 0 ですが、繰り返すうちに増えていき 5 になると i<5 が False になり while から抜けます。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 課題 2\n",
    "FizzBuzzプログラムを作成。  \n",
    "FizzBuzzゲームの遊び方  \n",
    "1から順番に数字を言っていきます。  \n",
    "ただし、  \n",
    "     3で割り切れる場合はFizz、  \n",
    "     5で割り切れる場合はBuzz  \n",
    "     両方で割り切れる場合はFizzBuzz  \n",
    "と言って下さい。  \n",
    "いくつまで言うかは最初に入力します。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "数字を入力してください: 0\n"
     ]
    }
   ],
   "source": [
    "x = input('数字を入力してください: ')\n",
    "x = int(x)\n",
    "#---ここから----\n",
    "\n",
    "\n",
    "#---ここまで----"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 練習問題 3\n",
    "下記の最大値を出力するプログラムを参考に、target のリストの中から最大値と2番目に大きい数字を出力するプログラムを作成してください。\n",
    "```\n",
    "max = 0  \n",
    "target = [5,4,2,6,9,1,2,3,10,2,5]  \n",
    "for n in target:  \n",
    "    if n > max :  \n",
    "        max = n  \n",
    "print(\"最大値は \" +max+ \" です\")  \n",
    "``` \n",
    "  \n",
    "---実行例---  \n",
    "最大値は 10 です。\n",
    "2番目に大きい数字は 9 です。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "target = [5,4,2,6,9,1,2,3,10,2,5]\n",
    "max=0\n",
    "max2=0\n",
    "#---記載範囲ここから----\n",
    "\n",
    "\n",
    "#---ここまで----\n",
    "print(\"最大値は \"+str(max)+\" です。\")\n",
    "print(\"2番目に大きい数字は \"+str(max2)+\" です。\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
